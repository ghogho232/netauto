name: netauto

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  # 1. Light CI Job (테스트 & 리포트 생성)
  light:
    name: CI Light (no lab)
    runs-on: ubuntu-22.04
    outputs:
      drift_status: ${{ steps.drift.outputs.exit_code }}
    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v4

      # Python 환경 구성
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # 필요한 패키지 설치
      - name: Install dependencies
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -U pip
          pip install -r requirements.txt

      # junit 결과 폴더 생성
      - name: Prepare junit output dir
        run: mkdir -p tests/artifacts

      # 드리프트 검사 실행(validate.py)
      - name: Run drift check (validate.py)
        env:
          CI_LIGHT: "1"
          NETAUTO_PREFIX: "clab-netauto"
        id: drift
        run: |
          . .venv/bin/activate
          set +e
          python python/validate.py
          CODE=$?
          echo "exit_code=$CODE" >> $GITHUB_OUTPUT
          exit 0

      # 드리프트 상태를 환경변수로 전달
      - name: Export DRIFT_STATUS for report
        run: echo "DRIFT_STATUS=${{ steps.drift.outputs.exit_code }}" >> $GITHUB_ENV

      # Pytest 실행 + 상태 수집 + 리포트 생성
      - name: Run drift + unit-safe tests (light mode)
        env:
          CI_LIGHT: "1"
          NETAUTO_PREFIX: "clab-netauto"
        run: |
          . .venv/bin/activate
          set +e
          pytest -q --junitxml=tests/artifacts/junit.xml
          TEST_RC=$?
          python python/collect_routes.py || true
          python python/report.py || true
          exit $TEST_RC

      # 테스트 결과, 리포트, 상태 파일 업로드
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: netauto-artifacts-light
          path: |
            tests/artifacts/**
            docs/report.md
            python/out/**

  # 2. GitHub Pages 배포 Job (리포트 게시)
  publish:
    name: Publish Health Report to GitHub Pages
    runs-on: ubuntu-22.04
    needs: light
    permissions:
      pages: write
      id-token: write
      contents: read
    steps:
      # light 잡에서 업로드한 아티팩트 다운로드
      - name: Download artifacts from light job
        uses: actions/download-artifact@v4
        with:
          name: netauto-artifacts-light
          path: site

      # 실제 파일 구조 확인용 디버그 로그
      - name: List downloaded files
        run: |
          echo "[tree of site/]"
          find site -maxdepth 5 -type f -print | sort

      # report 존재 보증(없으면 오류 처리)
      - name: Assert report exists
        run: |
          if [ ! -f "site/docs/report.md" ]; then
            echo "::error ::Missing site/docs/report.md in artifact"
            exit 1
          fi

      # 루트 인덱스 페이지 생성(리포트 링크 제공)
      - name: Create index.html
        run: |
          cat > site/index.html <<'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>Netauto Health</title>
          <h1>Netauto Health</h1>
          <p>Open <a href="./docs/report.md">Latest Report</a></p>
          <p><em>Auto-published by GitHub Actions</em></p>
          HTML

      # Pages 설정 및 업로드/배포
      - name: Configure Pages
        uses: actions/configure-pages@v5

      # Pages용 아티팩트 업로드
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      # 실제 Pages에 배포 수행
      - name: Deploy to Pages
        uses: actions/deploy-pages@v4

      # 배포 완료 후 최종 URL 표시
      - name: Print Pages URL
        run: |
          echo "Pages URL:"
          echo "https://${GITHUB_REPOSITORY_OWNER}.github.io/${{ github.event.repository.name }}/"

  # 3. Slack 알림 Job (결과 요약 통보)
  notify:
    name: Notify Result to Slack
    runs-on: ubuntu-22.04
    needs: light
    env:
      OWNER: ${{ github.repository_owner }}
      REPO: ${{ github.event.repository.name }}
      DRIFT_STATUS: ${{ needs.light.outputs.drift_status }}
    steps:
      # CI 결과 아티팩트 다운로드
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: netauto-artifacts-light
          path: artifacts

      # junit.xml 파싱 → 테스트 요약 수집
      - name: Parse JUnit summary
        id: junit
        shell: bash
        run: |
          python - <<'PY'
          import xml.etree.ElementTree as ET, pathlib, os
          p = pathlib.Path("artifacts/tests/artifacts/junit.xml")
          tests=fail=err=skip=0
          if p.exists():
            root = ET.fromstring(p.read_text(encoding="utf-8"))
            suites = root.findall(".//testsuite") or ([root] if root.tag=="testsuite" else (list(root) if root.tag=="testsuites" else []))
            for s in suites:
              tests += int(s.attrib.get("tests",0))
              fail  += int(s.attrib.get("failures",0))
              err   += int(s.attrib.get("errors",0))
              skip  += int(s.attrib.get("skipped",0))
          passed = max(0, tests - fail - err - skip)
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"tests={tests}\n")
            f.write(f"passed={passed}\n")
            f.write(f"failed={fail+err}\n")
            f.write(f"skipped={skip}\n")
          PY

      # Slack Webhook으로 결과 알림 전송
      - name: Send Slack notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        shell: bash
        run: |
          STATUS_COLOR="good"
          [ "${DRIFT_STATUS}" != "0" ] && STATUS_COLOR="#E01E5A"
          PAGES_URL="https://${OWNER}.github.io/${REPO}/docs/report.md"
          read -r -d '' PAYLOAD <<JSON
          {
            "text": "Netauto CI Result",
            "attachments": [
              {
                "color": "${STATUS_COLOR}",
                "fields": [
                  { "title": "Branch", "value": "${{ github.ref_name }}", "short": true },
                  { "title": "Commit", "value": "${{ github.sha }}", "short": true },
                  { "title": "Drift", "value": "${DRIFT_STATUS}", "short": true },
                  { "title": "Pytest", "value": "Passed: ${{ steps.junit.outputs.passed }}, Failed: ${{ steps.junit.outputs.failed }}, Skipped: ${{ steps.junit.outputs.skipped }}", "short": true },
                  { "title": "Report", "value": "<${PAGES_URL}|Open Latest Report>", "short": false }
                ]
              }
            ]
          }
          JSON
          curl -s -X POST -H 'Content-type: application/json' --data "${PAYLOAD}" "$SLACK_WEBHOOK_URL"

